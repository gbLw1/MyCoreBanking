@page "/"
@using System.Globalization;
@using ChartJs.Blazor.BarChart;
@using ChartJs.Blazor.LineChart;
@using ChartJs.Blazor.PieChart;
@using System.Drawing;

<!-- Título -->
<div class="d-flex justify-content-start align-items-center">
    <p class="mb-3 m-sm-0 h2 text-dark">Visão geral</p>
</div>

<hr />

@if (model is null)
{
    <div class="d-flex justify-content-center align-items-center" style="min-height: 50vh;">
        Aguarde...
    </div>
}
else
{
    <div class="row">
        <div class="col-md-6 col-xl-3 mb-4">
            <div class="card shadow border-start-primary py-2">
                <div class="card-body">
                    <div class="row align-items-center no-gutters">
                        <div class="col me-2">
                            <div class="text-uppercase text-primary fw-bold text-xs mb-1"><span>Seu saldo</span></div>
                            <div class="text-dark fw-bold h5 mb-0"><span>@(model.SaldoTotal.ToString("C", CultureInfo.GetCultureInfo("pt-BR")))</span></div>
                        </div>
                        <div class="col-auto"><i class="fas fa-dollar-sign fa-2x text-primary"></i></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-xl-3 mb-4">
            <div class="card shadow border-start-success py-2">
                <div class="card-body">
                    <div class="row align-items-center no-gutters">
                        <div class="col me-2">
                            <div class="text-uppercase text-success fw-bold text-xs mb-1"><span>Total investido</span></div>
                            <div class="text-dark fw-bold h5 mb-0"><span>@(model.TotalInvestido.ToString("C", CultureInfo.GetCultureInfo("pt-BR")))</span></div>
                        </div>
                        <div class="col-auto"><i class="fa-solid fa-money-bill-trend-up fa-2x text-success"></i></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-xl-3 mb-4">
            <div class="card shadow border-start-warning py-2" style="height: 94.8px">
                <div class="card-body">
                    <div class="row align-items-center no-gutters">
                        <div class="col me-2">
                            <div class="text-uppercase text-warning fw-bold text-xs mb-1"><span>Transações pendentes</span></div>
                            <div class="text-dark fw-bold h5 mb-0 me-3"><span>@(model.TransacoesPendentes)</span></div>
                        </div>
                        <div class="col-auto"><i class="fa-regular fa-calendar-minus fa-2x text-warning"></i></div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-6 col-xl-3 mb-4">
            <div class="card shadow border-start-info py-2">
                <div class="card-body">
                    <div class="row align-items-center no-gutters">
                        <div class="col me-2">
                            <div class="text-uppercase text-info fw-bold text-xs mb-1"><span>Balanço mensal</span></div>
                            <div class="text-dark fw-bold h5 mb-0"><span>@(model.BalancoMensal.ToString("C", CultureInfo.GetCultureInfo("pt-BR")))</span></div>
                        </div>
                        <div class="col-auto"><i class="fa-solid fa-scale-balanced fa-2x text-info"></i></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row">

        <!-- Total entrada / saída no ano atual -->
        <div class="d-none d-md-block col-lg-12 col-xl-8">
            <div class="card shadow mb-4" style="height: 100%">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="text-primary fw-bold m-0 py-2">Movimentações Entrada / Saída em @(DateTime.Now.Year)</h6>
                </div>
                <div class="card-body d-flex align-items-center">
                        <Chart Config="_lineConfig" @ref="_chart"></Chart>
                </div>
            </div>
        </div>

        <!-- Total gasto por categoria no mês atual -->
        <div class="d-none d-md-block mt-4 mt-xl-0 col-lg-12 col-xl-4">
            <div class="card shadow mb-4" style="height: 100%">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="text-primary fw-bold m-0 py-2">Total gasto neste mês (@(DateTime.Now.ToString("MMMM")))</h6>
                </div>
                <div class="card-body d-flex justify-content-center align-items-center">
                    @if (model.GraficoDespesaPorCategoriaMensal.Sum(c => c.Valor) == 0)
                    {
                        <p class="m-0 text-dark text-center">Você ainda não possui movimentações</p>
                    }
                    else
                    {
                        <Chart Config="_pieConfig"></Chart>
                    }
                </div>
            </div>
        </div>

    </div>

    <div class="row mt-4">
        <!-- Total gasto por categoria no ano atual -->
        <div class="d-none d-md-block col-lg-12 col-xl-8">
            <div class="card shadow mb-4" style="height: 100%">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="text-primary fw-bold m-0 py-2">Total gasto em cada categoria neste ano (@(DateTime.Now.Year))</h6>
                </div>
                <div class="card-body d-flex align-items-center">
                    <Chart Config="_barConfig"></Chart>
                </div>
            </div>
        </div>

        <!-- Anúncio -->
        <div class="mt-4 mt-xl-0 col-lg-12 col-xl-4">
            <div class="card shadow mb-4" style="height: 100%">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h6 class="text-primary fw-bold m-0 py-2">Anúncio plano de assinatura</h6>
                </div>
                <div class="card-body d-flex align-items-center">
                    <img src="/assets/img/dogs/image2.jpeg" style="object-fit: cover; width: 100%; height: 100%;" />
                </div>
            </div>
        </div>

    </div>

    <!--
    <div class="row">
        <div class="col-lg-6 mb-4">
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="text-primary fw-bold m-0">Projects</h6>
                </div>
                <div class="card-body">
                    <h4 class="small fw-bold">Server migration<span class="float-end">20%</span></h4>
                    <div class="progress mb-4">
                        <div class="progress-bar bg-danger" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" style="width: 20%;"><span class="visually-hidden">20%</span></div>
                    </div>
                    <h4 class="small fw-bold">Sales tracking<span class="float-end">40%</span></h4>
                    <div class="progress mb-4">
                        <div class="progress-bar bg-warning" aria-valuenow="40" aria-valuemin="0" aria-valuemax="100" style="width: 40%;"><span class="visually-hidden">40%</span></div>
                    </div>
                    <h4 class="small fw-bold">Customer Database<span class="float-end">60%</span></h4>
                    <div class="progress mb-4">
                        <div class="progress-bar bg-primary" aria-valuenow="60" aria-valuemin="0" aria-valuemax="100" style="width: 60%;"><span class="visually-hidden">60%</span></div>
                    </div>
                    <h4 class="small fw-bold">Payout Details<span class="float-end">80%</span></h4>
                    <div class="progress mb-4">
                        <div class="progress-bar bg-info" aria-valuenow="80" aria-valuemin="0" aria-valuemax="100" style="width: 80%;"><span class="visually-hidden">80%</span></div>
                    </div>
                    <h4 class="small fw-bold">Account setup<span class="float-end">Complete!</span></h4>
                    <div class="progress mb-4">
                        <div class="progress-bar bg-success" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%;"><span class="visually-hidden">100%</span></div>
                    </div>
                </div>
            </div>
            <div class="card shadow mb-4">
                <div class="card-header py-3">
                    <h6 class="text-primary fw-bold m-0">Todo List</h6>
                </div>
                <ul class="list-group list-group-flush">
                    <li class="list-group-item">
                        <div class="row align-items-center no-gutters">
                            <div class="col me-2">
                                <h6 class="mb-0"><strong>Lunch meeting</strong></h6><span class="text-xs">10:30 AM</span>
                            </div>
                            <div class="col-auto">
                                <div class="form-check"><input class="form-check-input" type="checkbox" id="formCheck-1"><label class="form-check-label" for="formCheck-1"></label></div>
                            </div>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="row align-items-center no-gutters">
                            <div class="col me-2">
                                <h6 class="mb-0"><strong>Lunch meeting</strong></h6><span class="text-xs">11:30 AM</span>
                            </div>
                            <div class="col-auto">
                                <div class="form-check"><input class="form-check-input" type="checkbox" id="formCheck-2"><label class="form-check-label" for="formCheck-2"></label></div>
                            </div>
                        </div>
                    </li>
                    <li class="list-group-item">
                        <div class="row align-items-center no-gutters">
                            <div class="col me-2">
                                <h6 class="mb-0"><strong>Lunch meeting</strong></h6><span class="text-xs">12:30 AM</span>
                            </div>
                            <div class="col-auto">
                                <div class="form-check"><input class="form-check-input" type="checkbox" id="formCheck-3"><label class="form-check-label" for="formCheck-3"></label></div>
                            </div>
                        </div>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col">
            <div class="row">
                <div class="col-lg-6 mb-4">
                    <div class="card text-white bg-primary shadow">
                        <div class="card-body">
                            <p class="m-0">Primary</p>
                            <p class="text-white-50 small m-0">#4e73df</p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-4">
                    <div class="card text-white bg-success shadow">
                        <div class="card-body">
                            <p class="m-0">Success</p>
                            <p class="text-white-50 small m-0">#1cc88a</p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-4">
                    <div class="card text-white bg-info shadow">
                        <div class="card-body">
                            <p class="m-0">Info</p>
                            <p class="text-white-50 small m-0">#36b9cc</p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-4">
                    <div class="card text-white bg-warning shadow">
                        <div class="card-body">
                            <p class="m-0">Warning</p>
                            <p class="text-white-50 small m-0">#f6c23e</p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-4">
                    <div class="card text-white bg-danger shadow">
                        <div class="card-body">
                            <p class="m-0">Danger</p>
                            <p class="text-white-50 small m-0">#e74a3b</p>
                        </div>
                    </div>
                </div>
                <div class="col-lg-6 mb-4">
                    <div class="card text-white bg-secondary shadow">
                        <div class="card-body">
                            <p class="m-0">Secondary</p>
                            <p class="text-white-50 small m-0">#858796</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    -->
}

@code {

    RelatorioModel? model;

    private PieConfig? _pieConfig;
    private LineConfig? _lineConfig;
    private BarConfig? _barConfig;
    private Chart _chart;

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            await MyCoreBankingApp.Initialize();
        }
        catch (Exception)
        {
            return;
        }

        await CarregarEstatisticas();

        CarregarGraficos();
    }

    void CarregarGraficos()
    {
        GerarGraficoLinhasDespesasReceitasAnual();
        GerarGraficoPizzaDespesasPorCategoriaMensal();
        GerarGraficoDeBarrasDespesasPorCategoriaAnual();
    }

    void GerarGraficoLinhasDespesasReceitasAnual()
    {
        _lineConfig = new LineConfig
            {
                Options = new LineOptions
                {
                    Responsive = true,
                    Scales = new Scales
                    {
                        XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks
                            {
                                AutoSkip = false
                            }
                        }
                    },
                        YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                    }
                }
            };

        LineDataset<decimal> despesaDataset = new LineDataset<decimal>
        {
            Label = "Despesas",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Red),
            BorderColor = ColorUtil.FromDrawingColor(Color.Red),
            Fill = false
        };

        LineDataset<decimal> receitaDataset = new LineDataset<decimal>
        {
            Label = "Receitas",
            BackgroundColor = ColorUtil.FromDrawingColor(Color.Green),
            BorderColor = ColorUtil.FromDrawingColor(Color.Green),
            Fill = false
        };

        foreach (var graph in model.GraficoMovimentacaoAnoAtual)
        {
            _lineConfig.Data.Labels.Add(graph.Mes switch
            {
                1 => "Janeiro",
                2 => "Fevereiro",
                3 => "Março",
                4 => "Abril",
                5 => "Maio",
                6 => "Junho",
                7 => "Julho",
                8 => "Agosto",
                9 => "Setembro",
                10 => "Outubro",
                11 => "Novembro",
                12 => "Dezembro",
                _ => "Mês inválido"
            });
            despesaDataset.Add(graph.ValorDespesa);
            receitaDataset.Add(graph.ValorReceita);
        }

        _lineConfig.Data.Datasets.Add(despesaDataset);
        _lineConfig.Data.Datasets.Add(receitaDataset);
    }

    void GerarGraficoPizzaDespesasPorCategoriaMensal()
    {
        _pieConfig = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
            }
        };

        PieDataset<decimal> data = new()
        {
            BackgroundColor = new[]
            {
                ColorUtil.FromDrawingColor(Color.Lavender), // Alimentacao,
                ColorUtil.FromDrawingColor(Color.Gray), // Casa,
                ColorUtil.FromDrawingColor(Color.Aqua), // Educacao,
                ColorUtil.FromDrawingColor(Color.Blue), // Eletronicos,
                ColorUtil.FromDrawingColor(Color.DarkBlue), // Investimentos,
                ColorUtil.FromDrawingColor(Color.Peru), // Lazer,
                ColorUtil.FromDrawingColor(Color.Brown), // Outros,
                ColorUtil.FromDrawingColor(Color.Magenta), // Presente,
                ColorUtil.FromDrawingColor(Color.DarkViolet), // Salario,
                ColorUtil.FromDrawingColor(Color.HotPink), // Saude,
                ColorUtil.FromDrawingColor(Color.Yellow), // Servico,
                ColorUtil.FromDrawingColor(Color.Orange), // Supermercado,
                ColorUtil.FromDrawingColor(Color.Red), // Transporte,
                ColorUtil.FromDrawingColor(Color.LightGreen), // Vestuario,
                ColorUtil.FromDrawingColor(Color.Green), // Viagem,
            }
        };

        foreach (var graph in model.GraficoDespesaPorCategoriaMensal)
        {
            _pieConfig.Data.Labels.Add(MyCoreBankingApp.ConverterEnumCategoriaParaString(graph.Categoria));
            data.Add(graph.Valor);
        }

        _pieConfig.Data.Datasets.Add(data);
    }

    void GerarGraficoDeBarrasDespesasPorCategoriaAnual()
    {
        _barConfig = new BarConfig
        {
            Options = new BarOptions
            {
                Responsive = true,
                Legend = new Legend
                {
                    Display = false
                },
                Scales = new BarScales
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new CategoryAxis
                        {
                            Ticks = new CategoryTicks
                            {
                                AutoSkip = false
                            }
                        }
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new LinearCartesianTicks
                            {
                                BeginAtZero = true
                            }
                        }
                    }
                }
            }
        };

        BarDataset<decimal> data = new()
        {
            BackgroundColor = new[]
            {
                ColorUtil.FromDrawingColor(Color.Lavender), // Alimentacao,
                ColorUtil.FromDrawingColor(Color.Gray), // Casa,
                ColorUtil.FromDrawingColor(Color.Aqua), // Educacao,
                ColorUtil.FromDrawingColor(Color.Blue), // Eletronicos,
                ColorUtil.FromDrawingColor(Color.DarkBlue), // Investimentos,
                ColorUtil.FromDrawingColor(Color.Peru), // Lazer,
                ColorUtil.FromDrawingColor(Color.Brown), // Outros,
                ColorUtil.FromDrawingColor(Color.Magenta), // Presente,
                ColorUtil.FromDrawingColor(Color.DarkViolet), // Salario,
                ColorUtil.FromDrawingColor(Color.HotPink), // Saude,
                ColorUtil.FromDrawingColor(Color.Yellow), // Servico,
                ColorUtil.FromDrawingColor(Color.Orange), // Supermercado,
                ColorUtil.FromDrawingColor(Color.Red), // Transporte,
                ColorUtil.FromDrawingColor(Color.LightGreen), // Vestuario,
                ColorUtil.FromDrawingColor(Color.Green), // Viagem,
            },
        };

        //foreach (var categoria in Enum.GetValues<Categoria>())
        //{
        //    _barConfig.Data.Labels.Add(MyCoreBankingApp.ConverterEnumCategoriaParaString(categoria));
        //}

        foreach (var graph in model.GraficoDespesaPorCategoriaAnual)
        {
            _barConfig.Data.Labels.Add(MyCoreBankingApp.ConverterEnumCategoriaParaString(graph.Categoria));
            data.Add(graph.Valor);
        }

        _barConfig.Data.Datasets.Add(data);
    }

    async Task CarregarEstatisticas()
    {
        var modalLoading = MyCoreBankingApp.ShowLoading();

        var result = await MyCoreBankingApp.ObterRelatorio();

        if (result is not null)
        {
            model = result;
        }

        modalLoading.Close();
    }
}